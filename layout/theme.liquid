<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    {% # Inlined CSS Variables %}
    {% render 'css-variables' %}

    {% # Load and preload the Tailwind CSS %}
    {{ 'tailwind.css' | asset_url | stylesheet_tag: preload: true }}

    {% # Social, title, etc. %}
    {% render 'meta-tags' %}

    {{ content_for_header }}
  </head>

  <body>
    {% sections 'header-group' %}

    {{ content_for_layout }}

    {% sections 'footer-group' %}

    <!-- Cart Sidebar JavaScript -->
    <script>
      class CartSidebar {
        constructor() {
          this.sidebar = document.querySelector('[data-cart-sidebar]');
          this.overlay = document.querySelector('[data-cart-overlay]');
          this.openButton = document.querySelector('[data-cart-open]');
          this.form = document.getElementById('cart-form');
          
          this.init();
        }

        getSectionsToRender() {
          return [
            {
              id: 'header',
              selector: '[data-cart-open]'
            },
            {
              id: 'cart-sidebar',
              selector: '[data-cart-sidebar]'
            }
          ];
        }

        getSectionInnerHTML(html, selector = '.shopify-section') {
          return new DOMParser().parseFromString(html, 'text/html').querySelector(selector).innerHTML;
        }

        renderContents(parsedState, autoOpen = true) {
          this.getSectionsToRender().forEach((section) => {
            const sectionElement = section.selector
              ? document.querySelector(section.selector)
              : document.getElementById(section.id);

            if (!sectionElement) return;
            
            if (section.id === 'header') {
              // Update cart button
              const newCartButton = new DOMParser()
                .parseFromString(parsedState.sections[section.id], 'text/html')
                .querySelector('[data-cart-open]');
              if (newCartButton && sectionElement) {
                sectionElement.innerHTML = newCartButton.innerHTML;
              }
            } else {
              // Update cart sidebar content
              sectionElement.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.id], section.selector);
            }
          });

          // Re-initialize event listeners after content update
          this.initCloseButtons();
          this.initQuantityControls();
          this.initRemoveButtons();

          // Auto-open the cart drawer only when adding items
          if (autoOpen) {
            setTimeout(() => {
              this.open();
            }, 100);
          }
        }

        init() {
          // Open sidebar
          if (this.openButton) {
            this.openButton.addEventListener('click', (e) => {
              e.preventDefault();
              this.open();
            });
          }

          // Close on overlay click
          if (this.overlay) {
            this.overlay.addEventListener('click', () => this.close());
          }

          // Close on escape key
          document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen()) {
              this.close();
            }
          });

          // Initialize interactive elements
          this.initCloseButtons();
          this.initQuantityControls();
          this.initRemoveButtons();
        }

        initCloseButtons() {
          // Remove old event listeners by querying fresh elements
          document.querySelectorAll('[data-cart-close]').forEach(button => {
            button.addEventListener('click', () => this.close());
          });
        }

        open() {
          if (this.sidebar && this.overlay) {
            this.overlay.classList.remove('hidden');
            this.sidebar.classList.remove('translate-x-full');
            document.body.style.overflow = 'hidden';
            
            // Focus management
            setTimeout(() => {
              const closeButton = this.sidebar.querySelector('[data-cart-close]');
              if (closeButton) closeButton.focus();
            }, 300);
          }
        }

        close() {
          if (this.sidebar && this.overlay) {
            this.sidebar.classList.add('translate-x-full');
            setTimeout(() => {
              this.overlay.classList.add('hidden');
            }, 300);
            document.body.style.overflow = '';
            
            // Return focus to cart button
            if (this.openButton) this.openButton.focus();
          }
        }

        isOpen() {
          return this.overlay && !this.overlay.classList.contains('hidden');
        }

        initQuantityControls() {
          // Quantity decrease buttons
          document.querySelectorAll('[data-quantity-decrease]').forEach(button => {
            button.addEventListener('click', (e) => {
              e.preventDefault();
              const key = button.dataset.quantityDecrease;
              const input = document.querySelector(`[data-quantity-input="${key}"]`);
              if (input) {
                const currentValue = parseInt(input.value);
                if (currentValue > 1) {
                  input.value = currentValue - 1;
                  this.updateQuantity(key, currentValue - 1);
                } else {
                  this.removeItem(key);
                }
              }
            });
          });

          // Quantity increase buttons
          document.querySelectorAll('[data-quantity-increase]').forEach(button => {
            button.addEventListener('click', (e) => {
              e.preventDefault();
              const key = button.dataset.quantityIncrease;
              const input = document.querySelector(`[data-quantity-input="${key}"]`);
              if (input) {
                const currentValue = parseInt(input.value);
                input.value = currentValue + 1;
                this.updateQuantity(key, currentValue + 1);
              }
            });
          });

          // Direct input changes
          document.querySelectorAll('[data-quantity-input]').forEach(input => {
            input.addEventListener('change', (e) => {
              const key = input.dataset.quantityInput;
              const value = parseInt(input.value);
              if (value === 0) {
                this.removeItem(key);
              } else {
                this.updateQuantity(key, value);
              }
            });
          });
        }

        initRemoveButtons() {
          document.querySelectorAll('[data-remove-item]').forEach(button => {
            button.addEventListener('click', (e) => {
              e.preventDefault();
              const key = button.dataset.removeItem;
              this.removeItem(key);
            });
          });
        }

        async updateQuantity(key, quantity) {
          try {
            const response = await fetch('/cart/change.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                id: key,
                quantity: quantity
              })
            });

            if (response.ok) {
              this.refreshCart();
            }
          } catch (error) {
            console.error('Error updating cart:', error);
          }
        }

        async removeItem(key) {
          try {
            const response = await fetch('/cart/change.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                id: key,
                quantity: 0
              })
            });

            if (response.ok) {
              this.refreshCart();
            }
          } catch (error) {
            console.error('Error removing item:', error);
          }
        }

        async refreshCart() {
          try {
            const promises = this.getSectionsToRender().map(section => 
              fetch(`/?section_id=${section.id}`).then(response => response.text())
            );
            
            const responses = await Promise.all(promises);
            const sections = {};
            
            responses.forEach((html, index) => {
              const sectionId = this.getSectionsToRender()[index].id;
              sections[sectionId] = html;
            });

            this.renderContents({ sections }, false); // Don't auto-open for quantity changes
          } catch (error) {
            console.error('Error refreshing cart:', error);
            // Fallback: reload the page
            window.location.reload();
          }
        }
      }

      // Initialize cart sidebar when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        window.cartSidebar = new CartSidebar();
        
        // TEMPORARY: Auto-open sidebar for styling - REMOVE WHEN DONE
        // setTimeout(() => {
        //   window.cartSidebar.open();
        // }, 100);
      });
    </script>
  </body>
</html>