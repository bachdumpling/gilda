{% comment %}
  Mobile: Stacked layout with sticky bottom bar
  Desktop: Split layout with scrolling images and fixed sidebar
{% endcomment %}

{% liquid
  # Only use selected variant from URL, don't default to first variant
  assign current_variant = product.selected_variant
  if current_variant == blank and product.variants.size == 1
    # If only one variant, select it by default
    assign current_variant = product.variants.first
  endif
%}

{% comment %} MOBILE LAYOUT {% endcomment %}
<div class="md:hidden border-t border-b border-black">
  {% comment %} First Image {% endcomment %}
  {% if product.images.size > 0 %}
    <div class="w-full relative">
      <a
        href="{{ routes.root_url }}"
        class="back-button-link absolute top-6 left-4 z-20 flex items-center justify-center gap-2 transition-all duration-200 text-sm font-mono uppercase"
        aria-label="Back to home"
      >
        <svg width="18" height="8" viewBox="0 0 18 8" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M0.646446 4.35355C0.451185 4.15829 0.451185 3.84171 0.646446 3.64645L3.82843 0.464466C4.02369 0.269204 4.34027 0.269204 4.53553 0.464466C4.7308 0.659728 4.7308 0.976311 4.53553 1.17157L1.70711 4L4.53553 6.82843C4.7308 7.02369 4.7308 7.34027 4.53553 7.53553C4.34027 7.7308 4.02369 7.7308 3.82843 7.53553L0.646446 4.35355ZM18 4V4.5H1V4V3.5H18V4Z" fill="black"/>
        </svg>
        Back
      </a>
      <div class="w-full aspect-square overflow-hidden flex items-center justify-center">
        <img
          src="{{ product.images.first | image_url: width: 1200 }}"
          srcset="
            {{ product.images.first | image_url: width: 600 }} 600w,
            {{ product.images.first | image_url: width: 1200 }} 1200w
          "
          sizes="100vw"
          alt="{{ product.images.first.alt | escape }}"
          loading="eager"
          width="{{ product.images.first.width }}"
          height="{{ product.images.first.height }}"
          class="max-w-full max-h-full object-cover"
        >
      </div>
    </div>
  {% endif %}

  {% comment %} Product Info Section {% endcomment %}
  <div>
    {% comment %} Product Title {% endcomment %}
    <div class="flex items-center justify-center product-title border-b border-black py-10">
      <h1 class="text-base font-mono uppercase text-center">{{ product.title }}</h1>
    </div>

    {% comment %} Tabs {% endcomment %}
    <div class="product-tabs">
      <div class="flex border-b border-black">
        <button
          type="button"
          class="tab-button flex-1 py-6 text-sm font-mono uppercase border-r border-black hover:underline transition-colors"
          data-tab="info"
          data-active="true"
        >
          Info
        </button>
        <button
          type="button"
          class="tab-button flex-1 py-6 text-sm font-mono uppercase border-r border-black hover:underline transition-colors"
          data-tab="materials"
        >
          Materials
        </button>
        <button
          type="button"
          class="tab-button flex-1 py-6 text-sm font-mono uppercase hover:underline transition-colors"
          data-tab="sizing"
        >
          Sizing
        </button>
      </div>

      <div class="tab-content p-8 md:p-4 lg:p-8 min-h-fit">
        <div class="tab-panel" data-tab-content="info" data-active="true">
          <div class="text-sm font-sans text-subtitle leading-relaxed prose prose-sm max-w-none">
            {% if product.description != blank %}
              {{ product.description }}
            {% elsif product.metafields.custom.info != blank %}
              {{ product.metafields.custom.info | metafield_tag }}
            {% else %}
              <p>Product information will be displayed here.</p>
            {% endif %}
          </div>
        </div>

        <div class="tab-panel hidden" data-tab-content="materials">
          <div class="text-sm font-sans text-subtitle leading-relaxed prose prose-sm max-w-none">
            {% if product.metafields.custom.materials != blank %}
              {{ product.metafields.custom.materials | metafield_tag }}
            {% else %}
              <p>Material information will be displayed here.</p>
            {% endif %}
          </div>
        </div>

        <div class="tab-panel hidden" data-tab-content="sizing">
          <div class="text-sm font-sans text-subtitle flex justify-center">
            {% if product.metafields.custom.size_chart != blank %}
              {% assign size_chart = product.metafields.custom.size_chart.value %}
              <table class="size-chart">
                <thead>
                  <tr>
                    <th class="py-2 font-normal">Size</th>
                    {% if size_chart.back != blank %}
                      <th class="py-2 font-normal">Back</th>
                    {% endif %}
                    {% if size_chart.shoulder != blank %}
                      <th class="py-2 font-normal">Shoulder</th>
                    {% endif %}
                    {% if size_chart.sleeve != blank %}
                      <th class="py-2 font-normal">Sleeve</th>
                    {% endif %}
                    {% if size_chart.chest != blank %}
                      <th class="py-2 font-normal">Chest</th>
                    {% endif %}
                    {% if size_chart.waist != blank %}
                      <th class="py-2 font-normal">Waist</th>
                    {% endif %}
                    {% if size_chart.hip != blank %}
                      <th class="py-2 font-normal">Hip</th>
                    {% endif %}
                    {% if size_chart.inseam != blank %}
                      <th class="py-2 font-normal">Inseam</th>
                    {% endif %}
                    {% if size_chart.rise != blank %}
                      <th class="py-2 font-normal">Rise</th>
                    {% endif %}
                  </tr>
                </thead>
                <tbody class="font-sans">
                  {% for size in size_chart.sizes.value %}
                    <tr>
                      <td class="py-3">{{ size }}</td>
                      {% if size_chart.back != blank %}
                        <td class="py-3">
                          {{ size_chart.back.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                      {% if size_chart.shoulder != blank %}
                        <td class="py-3">
                          {{ size_chart.shoulder.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                      {% if size_chart.sleeve != blank %}
                        <td class="py-3">
                          {{ size_chart.sleeve.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                      {% if size_chart.chest != blank %}
                        <td class="py-3">
                          {{ size_chart.chest.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                      {% if size_chart.waist != blank %}
                        <td class="py-3">
                          {{ size_chart.waist.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                      {% if size_chart.hip != blank %}
                        <td class="py-3">
                          {{ size_chart.hip.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                      {% if size_chart.inseam != blank %}
                        <td class="py-3">
                          {{ size_chart.inseam.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                      {% if size_chart.rise != blank %}
                        <td class="py-3">
                          {{ size_chart.rise.value[forloop.index0] -}}
                          {{- size_chart.unit }}
                        </td>
                      {% endif %}
                    </tr>
                  {% endfor %}
                </tbody>
              </table>
            {% elsif product.metafields.custom.sizing_table != blank %}
              {{ product.metafields.custom.sizing_table }}
            {% else %}
              <p>Sizing information will be displayed here.</p>
            {% endif %}
          </div>
        </div>
      </div>
    </div>

    {% comment %} Form in Normal Flow - Mobile {% endcomment %}
    <div id="mobile-add-to-cart" class="bg-background">
      <div class="">
        {% form 'product', product, id: 'product-form-mobile' %}
          <input type="hidden" name="id" id="product-variant-id-mobile" value="{{ current_variant.id }}">

          {% if product.variants.size > 1 %}
            {% for option in product.options_with_values %}
              <div class="border-t border-b border-black flex items-center justify-center">
                <div class="flex w-full justify-between py-4 px-6">
                  {% for value in option.values %}
                    {% liquid
                      # Check availability based on option position
                      assign is_available = false
                      for variant in product.variants
                        if option.position == 1 and variant.option1 == value and variant.available
                          assign is_available = true
                          break
                        elsif option.position == 2 and variant.option2 == value and variant.available
                          assign is_available = true
                          break
                        elsif option.position == 3 and variant.option3 == value and variant.available
                          assign is_available = true
                          break
                        endif
                      endfor
                    %}
                    <button
                      type="button"
                      class="p-3 w-10 h-10 variant-option-mobile font-medium cursor-pointer flex items-center justify-center text-sm font-mono uppercase rounded-full border border-transparent hover:border-black hover:bg-black hover:text-white transition-all duration-200"
                      data-option-position="{{ option.position }}"
                      data-option-value="{{ value | escape }}"
                      data-variant-available="{{ is_available }}"
                      {% if current_variant[option.name] == value %}
                        data-selected="true"
                      {% endif %}
                      {% unless is_available %}
                        disabled
                      {% endunless %}
                    >
                      {{ value }}
                    </button>
                  {% endfor %}
                </div>
              </div>
            {% endfor %}
          {% endif %}

          <button
            type="submit"
            class="cursor-pointer w-full pt-6 pb-6 text-sm font-mono uppercase hover:bg-black hover:text-white disabled:hover:bg-transparent disabled:hover:text-black transition-all duration-300 text-center disabled:opacity-50 disabled:cursor-not-allowed"
            {% if current_variant == blank or current_variant.available == false %}
              disabled
            {% endif %}
          >
            <span id="add-to-cart-text-mobile">
              {% if current_variant == blank %}
                {{ product.price_min | money }} - Add to cart
              {% elsif current_variant.available %}
                {{ current_variant.price | money }} - Add to cart
              {% else %}
                {{ current_variant.price | money }} - Sold out
              {% endif %}
            </span>
          </button>
        {% endform %}
      </div>
    </div>
  </div>

  {% comment %} Remaining Images {% endcomment %}
  {% if product.images.size > 1 %}
    <div class="flex flex-col gap-2">
      {% for image in product.images offset: 1 %}
        <div class="w-full aspect-square overflow-hidden flex items-center justify-center">
          <img
            src="{{ image | image_url: width: 1200 }}"
            srcset="
              {{ image | image_url: width: 600 }} 600w,
              {{ image | image_url: width: 1200 }} 1200w
            "
            sizes="100vw"
            alt="{{ image.alt | escape }}"
            loading="lazy"
            width="{{ image.width }}"
            height="{{ image.height }}"
            class="max-w-full max-h-full object-cover"
          >
        </div>
      {% endfor %}
    </div>
  {% endif %}
</div>

{% comment %} DESKTOP LAYOUT {% endcomment %}
<div class="hidden md:flex min-h-screen border-t border-b border-black">
  {% comment %} Left side: All Images {% endcomment %}
  <div class="w-1/2 xl:w-2/3 overflow-y-auto border-r border-black relative">
    <div class="product-images relative flex flex-col gap-2">
      <a
        href="{{ routes.root_url }}"
        class="back-button-link absolute top-6 left-10 z-20 flex items-center justify-center gap-2 transition-all duration-200 text-sm font-mono uppercase"
        aria-label="Back to home"
      >
        <svg width="18" height="8" viewBox="0 0 18 8" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M0.646446 4.35355C0.451185 4.15829 0.451185 3.84171 0.646446 3.64645L3.82843 0.464466C4.02369 0.269204 4.34027 0.269204 4.53553 0.464466C4.7308 0.659728 4.7308 0.976311 4.53553 1.17157L1.70711 4L4.53553 6.82843C4.7308 7.02369 4.7308 7.34027 4.53553 7.53553C4.34027 7.7308 4.02369 7.7308 3.82843 7.53553L0.646446 4.35355ZM18 4V4.5H1V4V3.5H18V4Z" fill="black"/>
        </svg>
        Back
      </a>
      {% if product.images.size > 0 %}
        {% for image in product.images %}
          <div class="w-full aspect-square overflow-hidden flex items-center justify-center">
            <img
              src="{{ image | image_url: width: 1200 }}"
              srcset="
                {{ image | image_url: width: 600 }} 600w,
                {{ image | image_url: width: 1200 }} 1200w,
                {{ image | image_url: width: 1800 }} 1800w
              "
              sizes="(min-width: 1280px) 66vw, 50vw"
              alt="{{ image.alt | escape }}"
              loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
              width="{{ image.width }}"
              height="{{ image.height }}"
              class="max-w-full max-h-full object-cover"
            >
          </div>
        {% endfor %}
      {% endif %}
    </div>
  </div>

  {% comment %} Right side: Sticky Sidebar {% endcomment %}
  <div class="w-1/2 xl:w-1/3 sticky top-0 h-screen overflow-y-auto">
    <div class="flex flex-col h-full">
      {% comment %} Product Title {% endcomment %}
      <div class="flex items-center justify-center product-title border-b border-black py-10 flex-shrink-0">
        <h1 class="text-sm md:text-sm lg:text-[15px] xl:text-base 2xl:text-xl px-4 text-center font-mono uppercase">
          {{ product.title }}
        </h1>
      </div>

      {% comment %} Tabs and Content - Desktop {% endcomment %}
      <div class="product-tabs flex-grow flex flex-col overflow-hidden">
        <div class="flex border-b border-black flex-shrink-0">
          <button
            type="button"
            class="tab-button cursor-pointer flex-1 py-6 px-auto text-xs md:text-base font-mono uppercase border-r border-black hover:underline transition-colors"
            data-tab="info"
            data-active="true"
          >
            Info
          </button>
          <button
            type="button"
            class="tab-button cursor-pointer flex-1 py-6 px-auto text-xs md:text-base font-mono uppercase border-r border-black hover:underline transition-colors"
            data-tab="materials"
          >
            Materials
          </button>
          <button
            type="button"
            class="tab-button cursor-pointer flex-1 py-6 px-auto text-xs md:text-base font-mono uppercase hover:underline transition-colors"
            data-tab="sizing"
          >
            Sizing
          </button>
        </div>

        <div class="flex-grow overflow-y-auto">
          <div class="">
            {% comment %} Tab Content {% endcomment %}
            <div class="tab-content p-4 lg:p-8">
              <div class="tab-panel" data-tab-content="info" data-active="true">
                <div class="text-xs md:text-base font-sans text-subtitle prose prose-sm max-w-none">
                  {% if product.description != blank %}
                    {{ product.description }}
                  {% elsif product.metafields.custom.info != blank %}
                    {{ product.metafields.custom.info | metafield_tag }}
                  {% else %}
                    <p>Product information will be displayed here.</p>
                  {% endif %}
                </div>
              </div>

              <div class="tab-panel hidden" data-tab-content="materials">
                <div class="text-xs md:text-base font-sans text-subtitle leading-relaxed prose prose-sm max-w-none">
                  {% if product.metafields.custom.materials != blank %}
                    {{ product.metafields.custom.materials | metafield_tag }}
                  {% else %}
                    <p>Material information will be displayed here.</p>
                  {% endif %}
                </div>
              </div>

              <div class="tab-panel hidden" data-tab-content="sizing">
                <div class="text-sm font-sans text-subtitle flex justify-center">
                  {% if product.metafields.custom.size_chart != blank %}
                    {% assign size_chart = product.metafields.custom.size_chart.value %}
                    <table class="size-chart">
                      <thead>
                        <tr>
                          <th class="py-2 font-normal">Size</th>
                          {% if size_chart.back != blank %}
                            <th class="py-2 font-normal">Back</th>
                          {% endif %}
                          {% if size_chart.shoulder != blank %}
                            <th class="py-2 font-normal">Shoulder</th>
                          {% endif %}
                          {% if size_chart.sleeve != blank %}
                            <th class="py-2 font-normal">Sleeve</th>
                          {% endif %}
                          {% if size_chart.chest != blank %}
                            <th class="py-2 font-normal">Chest</th>
                          {% endif %}
                          {% if size_chart.waist != blank %}
                            <th class="py-2 font-normal">Waist</th>
                          {% endif %}
                          {% if size_chart.hip != blank %}
                            <th class="py-2 font-normal">Hip</th>
                          {% endif %}
                          {% if size_chart.inseam != blank %}
                            <th class="py-2 font-normal">Inseam</th>
                          {% endif %}
                          {% if size_chart.rise != blank %}
                            <th class="py-2 font-normal">Rise</th>
                          {% endif %}
                        </tr>
                      </thead>
                      <tbody class="font-sans">
                        {% for size in size_chart.sizes.value %}
                          <tr>
                            <td class="py-3">{{ size }}</td>
                            {% if size_chart.back != blank %}
                              <td class="py-3">
                                {{ size_chart.back.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                            {% if size_chart.shoulder != blank %}
                              <td class="py-3">
                                {{ size_chart.shoulder.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                            {% if size_chart.sleeve != blank %}
                              <td class="py-3">
                                {{ size_chart.sleeve.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                            {% if size_chart.chest != blank %}
                              <td class="py-3">
                                {{ size_chart.chest.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                            {% if size_chart.waist != blank %}
                              <td class="py-3">
                                {{ size_chart.waist.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                            {% if size_chart.hip != blank %}
                              <td class="py-3">
                                {{ size_chart.hip.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                            {% if size_chart.inseam != blank %}
                              <td class="py-3">
                                {{ size_chart.inseam.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                            {% if size_chart.rise != blank %}
                              <td class="py-3">
                                {{ size_chart.rise.value[forloop.index0] -}}
                                {{- size_chart.unit }}
                              </td>
                            {% endif %}
                          </tr>
                        {% endfor %}
                      </tbody>
                    </table>
                  {% elsif product.metafields.custom.sizing_table != blank %}
                    {{ product.metafields.custom.sizing_table }}
                  {% else %}
                    <p>Sizing information will be displayed here.</p>
                  {% endif %}
                </div>
              </div>
            </div>

            {% comment %} Product Form - Desktop (flows with content) {% endcomment %}
            {% form 'product', product, id: 'product-form-desktop' %}
              <input type="hidden" name="id" id="product-variant-id-desktop" value="{{ current_variant.id }}">

              {% if product.variants.size > 1 %}
                {% for option in product.options_with_values %}
                  <div class="border-b border-t border-black flex items-center justify-center p-6">
                    <div class="flex w-[333px] justify-between gap-2">
                      {% for value in option.values %}
                        {% liquid
                          # Check availability based on option position
                          assign is_available = false
                          for variant in product.variants
                            if option.position == 1 and variant.option1 == value and variant.available
                              assign is_available = true
                              break
                            elsif option.position == 2 and variant.option2 == value and variant.available
                              assign is_available = true
                              break
                            elsif option.position == 3 and variant.option3 == value and variant.available
                              assign is_available = true
                              break
                            endif
                          endfor
                        %}
                        <button
                          type="button"
                          class="variant-option-desktop cursor-pointer w-12 h-12 flex items-center justify-center text-base font-mono uppercase rounded-full border border-transparent hover:border-black hover:bg-black hover:text-white transition-all duration-200"
                          data-option-position="{{ option.position }}"
                          data-option-value="{{ value | escape }}"
                          data-variant-available="{{ is_available }}"
                          {% if current_variant[option.name] == value %}
                            data-selected="true"
                          {% endif %}
                          {% unless is_available %}
                            disabled
                          {% endunless %}
                        >
                          {{ value }}
                        </button>
                      {% endfor %}
                    </div>
                  </div>
                {% endfor %}
              {% endif %}

              <button
                type="submit"
                class="cursor-pointer w-full py-5 px-3 text-base font-mono uppercase border-b border-black hover:bg-black hover:text-white disabled:hover:bg-transparent disabled:hover:text-black transition-all duration-300 text-center disabled:opacity-50 disabled:cursor-not-allowed"
                {% if current_variant == blank or current_variant.available == false %}
                  disabled
                {% endif %}
              >
                <span id="add-to-cart-text-desktop">
                  {% if current_variant == blank %}
                    {{ product.price_min | money }} - Add to cart
                  {% elsif current_variant.available %}
                    {{ current_variant.price | money }} - Add to cart
                  {% else %}
                    {{ current_variant.price | money }} - Sold out
                  {% endif %}
                </span>
              </button>
            {% endform %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script id="product-json" type="application/json">
  {{ product | json }}
</script>

{% stylesheet %}
  /* Back Button Animation */
  .back-button-link svg {
    transition: transform 0.3s ease;
  }

  .back-button-link:hover svg {
    transform: translateX(-4px);
  }

  /* Variant Buttons - Mobile and Desktop */
  .variant-option-mobile[data-selected='true'],
  .variant-option-desktop[data-selected='true'] {
    border-color: black;
  }

  .variant-option-mobile:disabled,
  .variant-option-desktop:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .variant-option-mobile:disabled:hover,
  .variant-option-desktop:disabled:hover {
    border-color: transparent;
  }

  /* Tab Buttons */
  .tab-button[data-active='true'] {
    text-decoration: underline;
  }

  /* Tab Panels */
  .tab-panel {
    display: none;
  }

  .tab-panel[data-active='true'] {
    display: block;
  }

  /* Size Chart */
  .size-chart {
    border-collapse: separate;
    border-spacing: 30px 8px;
  }

  .size-chart th,
  .size-chart td {
    text-align: center;
  }

  @media (min-width: 1024px) {
    .size-chart th,
    .size-chart td {
      min-width: 64px;
    }
  }

  /* Mobile Sticky Bar - when scrolled past */
  #mobile-add-to-cart.is-sticky {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 30;
    background-color: rgba(242, 239, 237, 0.8);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    box-shadow: 0 -3px 200px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
    transform: translateZ(0);
    -webkit-transform: translateZ(0);
  }

  /* Add padding for safe area on the inner content */
  #mobile-add-to-cart.is-sticky > div {
    padding-bottom: env(safe-area-inset-bottom, 0);
  }

  /* Hide when reaching footer */
  #mobile-add-to-cart.is-hidden {
    transform: translateY(100%) translateZ(0);
    opacity: 0;
    pointer-events: none;
  }
{% endstylesheet %}

{% javascript %}
  class ProductTabs {
    constructor() {
      this.buttons = document.querySelectorAll('.tab-button');
      this.panels = document.querySelectorAll('.tab-panel');
      this.init();
    }

    init() {
      this.buttons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const tabName = button.dataset.tab;
          this.switchTab(tabName);
        });
      });
    }

    switchTab(tabName) {
      // Update buttons
      this.buttons.forEach((btn) => {
        if (btn.dataset.tab === tabName) {
          btn.dataset.active = 'true';
        } else {
          btn.dataset.active = 'false';
        }
      });

      // Update panels
      this.panels.forEach((panel) => {
        if (panel.dataset.tabContent === tabName) {
          panel.dataset.active = 'true';
        } else {
          panel.dataset.active = 'false';
        }
      });
    }
  }

  class MobileStickyBar {
    constructor() {
      this.stickyBar = document.getElementById('mobile-add-to-cart');
      if (!this.stickyBar) return;

      this.originalPosition = null;
      this.isSticky = false;
      this.isHidden = false;
      this.init();
    }

    init() {
      // Store original position
      this.updateOriginalPosition();

      // Handle scroll with optimized performance
      let ticking = false;
      window.addEventListener(
        'scroll',
        () => {
          if (!ticking) {
            window.requestAnimationFrame(() => {
              this.handleScroll();
              ticking = false;
            });
            ticking = true;
          }
        },
        { passive: true }
      );

      // Update position on resize
      window.addEventListener('resize', () => {
        this.updateOriginalPosition();
        this.handleScroll();
      });
    }

    updateOriginalPosition() {
      if (!this.stickyBar) return;

      // Temporarily remove sticky class to get true position
      this.stickyBar.classList.remove('is-sticky');
      const rect = this.stickyBar.getBoundingClientRect();
      this.originalPosition = rect.top + window.scrollY;

      // Restore sticky if it was sticky
      if (this.isSticky) {
        this.stickyBar.classList.add('is-sticky');
      }
    }

    handleScroll() {
      if (!this.stickyBar || this.originalPosition === null) return;

      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const barHeight = this.stickyBar.offsetHeight;
      const documentHeight = document.documentElement.scrollHeight;

      // Check if the bar would be below the viewport
      const barBottomPosition = this.originalPosition + barHeight;
      const shouldBeSticky = scrollY + windowHeight > barBottomPosition;

      // Get footer element (assuming it's rendered via sections 'footer-group')
      const footer = document.querySelector('[id*="shopify-section-footer"]');

      // Check if we've scrolled to the footer
      let shouldHide = false;
      if (footer) {
        const footerTop = footer.getBoundingClientRect().top + scrollY;
        const stickyBarBottom = scrollY + windowHeight;
        // Hide if sticky bar would overlap with footer
        shouldHide = stickyBarBottom >= footerTop;
      } else {
        // Fallback: hide when near bottom of page
        shouldHide = scrollY + windowHeight >= documentHeight - 50;
      }

      // Update sticky state
      if (shouldBeSticky && !this.isSticky) {
        this.stickyBar.classList.add('is-sticky');
        this.isSticky = true;
      } else if (!shouldBeSticky && this.isSticky) {
        this.stickyBar.classList.remove('is-sticky');
        this.isSticky = false;
      }

      // Update hidden state
      if (shouldHide && !this.isHidden) {
        this.stickyBar.classList.add('is-hidden');
        this.isHidden = true;
      } else if (!shouldHide && this.isHidden) {
        this.stickyBar.classList.remove('is-hidden');
        this.isHidden = false;
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ProductTabs();
      new MobileStickyBar();
    });
  } else {
    new ProductTabs();
    new MobileStickyBar();
  }
{% endjavascript %}

<script src="{{ 'product-form.js' | asset_url }}" defer></script>

{% schema %}
{
  "name": "t:general.product",
  "settings": [],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
